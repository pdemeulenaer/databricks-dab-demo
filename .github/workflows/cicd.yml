name: CICD Workflow

on:
  push:
    branches:
      - 'feature/**'  # Runs build job on any feature/* branch push
      - main  # only for testing, disable this
    paths:
      - 'src/**'
      - '.github/workflows/**'
      - 'databricks.yml'
      - 'resources/*.yml'
      - 'poetry.lock'
      - 'pyproject.toml'      
  pull_request:
    branches:
      - main  # Runs build, test, and deploy jobs on pull request to main branch

jobs:
  build:
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Build Project
        run: echo "Building the project..."

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'        

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "POETRY_HOME=$HOME/.local/bin" >> $GITHUB_ENV
        env:
          POETRY_VERSION: 2.1.1      
          
      - name: Install Project Dependencies
        run: |
          poetry install --no-root # to avoid installing the project itself as a package (useful if you're just setting up dependencies)
        # env:
        #   PATH: "${{ github.workspace }}/.venv/bin:$HOME/.local/bin:${{ env.PATH }}"          

      - name: Install Databricks CLI (not in venv)
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh   
          databricks version
          # Debug: Verify the installation path
          # ls -la $HOME/.databricks 
          ls -la /usr/local/bin/databricks         

      - name: Upload Databricks CLI as artifact
        uses: actions/upload-artifact@v4
        with:
          name: databricks-cli
          path: /usr/local/bin/databricks

      - name: Validate Databricks bundle
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}        
        run: |
          databricks bundle validate
      
                 
  # test:
  #   if: github.event_name == 'push' || github.event_name == 'pull_request'
  #   needs: build
  #   runs-on: ubuntu-latest
  #   environment: development
  #   steps:
  #     - name: Run Tests
  #       run: echo "Running tests..."


  deploy-dev:
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    needs: build # test
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Deploy
        run: echo "Deploying..."

      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Restore Poetry and dependencies from cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.virtualenvs
            ~/.local/bin  # Restore Poetry binary
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
  
      - name: Ensure Poetry is available
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry --version  # Verify Poetry is restored
          # Install dependencies only if cache missed
          poetry install --no-root --no-interaction || true  # Ignore failure if already installed
  

      - name: Install Project Dependencies (if cache miss)
        run: |
          poetry install --no-root --no-interaction

      - name: Download Databricks CLI artifact
        uses: actions/download-artifact@v4
        with:
          name: databricks-cli
          path: /usr/local/bin/databricks

      - name: Ensure Databricks CLI is executable
        run: |
          chmod +x /usr/local/bin/databricks
          echo "/usr/local/bin/databricks" >> $GITHUB_PATH
          databricks version

      - name: Deploy Databricks Bundle
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          databricks bundle deploy



  # deploy-production:
  #   if: github.event_name == 'pull_request'
  #   needs: deploy-dev
  #   runs-on: ubuntu-latest
  #   environment: production
  #     # Requires approval for 'production' environment
  #   steps:
  #     - name: Deploy
  #       run: echo "Deploying..."   
        
  #     - name: Checkout Code
  #       uses: actions/checkout@v2

  #     - name: Install Databricks CLI
  #       run: |
  #         curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh   
  #         databricks version

  #     - name: Deploy Databricks Bundle
  #       env:
  #         DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
  #         DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
  #       run: |
  #         databricks bundle deploy        
